#!/usr/bin/env bash

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WIRELESS_INTERFACES=($(nmcli device | awk '$2=="wifi" {print $1}'))
WLAN_INT=0
WIRED_INTERFACES=($(nmcli device | awk '$2=="ethernet" {print $1}'))

function initialization() {
	source "$HOME/.config/ronema/ronema.conf" || exit
	[[ -f "$HOME/.config/ronema/ronema.rasi" ]] && RASI_DIR="$HOME/.config/ronema/ronema.rasi" || exit
	wireless_interface_state && ethernet_interface_state
}

function wireless_interface_state() {
    if [[ ${#WIRELESS_INTERFACES[@]} -eq "0" ]]; then
        # No wireless interfaces found
        OPTIONS="*No Wireless Card*       \n"
        PROMPT="No Wi-Fi"
    else
        ACTIVE_SSID=$(nmcli device status | grep "^${WIRELESS_INTERFACES[WLAN_INT]}." | awk '{print $4}')
        WIFI_CON_STATE=$(nmcli device status | grep "^${WIRELESS_INTERFACES[WLAN_INT]}." | awk '{print $3}')
        WIFI_SWITCH="${SELECTION_PREFIX}Switch Wi-Fi"
        PROMPT=${WIRELESS_INTERFACES[WLAN_INT]}
        if [[ "$WIFI_CON_STATE" == "unavailable" ]]; then
            OPTIONS="${WIFI_SWITCH}\n***Wi-Fi Disabled***\n"
        else
            WIFI_LIST=$(nmcli --fields SSID,SECURITY,BARS device wifi list ifname "${WIRELESS_INTERFACES[WLAN_INT]}")
            wifi_list
            if [[ "$ACTIVE_SSID" == "--" ]]; then
                OPTIONS="${WIFI_SWITCH}\n${SELECTION_PREFIX}Scan\n${SELECTION_PREFIX}More Options\n${WIFI_LIST}\n"
            else
                OPTIONS="${WIFI_SWITCH}\n${SELECTION_PREFIX}Disconnect - ${ACTIVE_SSID}\n${SELECTION_PREFIX}Scan\n${SELECTION_PREFIX}More Options\n${WIFI_LIST}\n"
            fi
        fi
    fi
}

function ethernet_interface_state() {
    [[ ${#WIRED_INTERFACES[@]} -eq "0" ]] || {
        WIRED_CON_STATE=$(nmcli device status | grep "ethernet" | head -1 | awk '{print $3}')
        if [[ "$WIRED_CON_STATE" == "disconnected" ]]; then
            WIRED_SWITCH="${SELECTION_PREFIX}Wired On"
        elif [[ "$WIRED_CON_STATE" == "connected" ]]; then
            WIRED_SWITCH="${SELECTION_PREFIX}Switch Wired Off"
            # Add More Options when wired is connected and no WiFi card
            [[ ${#WIRELESS_INTERFACES[@]} -eq "0" ]] && OPTIONS="${OPTIONS}${SELECTION_PREFIX}More Options\n"
        elif [[ "$WIRED_CON_STATE" == "unavailable" ]]; then
            WIRED_SWITCH="***Wired Unavailable***"
        elif [[ "$WIRED_CON_STATE" == "connecting" ]]; then
            WIRED_SWITCH="***Wired Initializing***"
        fi
        OPTIONS="${OPTIONS}${WIRED_SWITCH}\n"
    }
}

function rofi_menu() {
    if [[ ${#WIRELESS_INTERFACES[@]} -eq "0" ]]; then
        PROMPT="No Wi-Fi"
    else
        PROMPT="${WIRELESS_INTERFACES[0]}"
    fi

    if [[ "$WIRED_CON_STATE" == "connected" ]]; then
        PROMPT="${WIRED_INTERFACES[0]}"
    fi

    SELECTION=$(echo -e "$OPTIONS" | rofi_cmd "$OPTIONS" $WIDTH_FIX_MAIN "-a 0")
    SSID=$(echo "$SELECTION" | sed "s/\s\{2,\}/\|/g" | awk -F "|" '{print $1}' | sed 's/✓ //')
    selection_action
}

function rofi_cmd() {
	{ [[ -n "${1}" ]] && WIDTH=$(echo -e "$1" | awk '{print length}' | sort -n | tail -1) && ((WIDTH += $2)) && ((WIDTH = WIDTH / 2)); } || { ((WIDTH = $2 / 2)); }
	rofi -dmenu -i -location "$LOCATION" -yoffset "$Y_AXIS" -xoffset "$X_AXIS" $3 -theme "$RASI_DIR" -theme-str 'window{width: '"$WIDTH"'em;}textbox-prompt-colon{str:"'"$PROMPT"':";}'"$4"''
}

function change_wireless_interface() {
	{ [[ ${#WIRELESS_INTERFACES[@]} -eq "2" ]] && { [[ $WLAN_INT -eq "0" ]] && WLAN_INT=1 || WLAN_INT=0; }; } || {
		LIST_WLAN_INT=""
		for i in "${!WIRELESS_INTERFACES[@]}"; do LIST_WLAN_INT=("${LIST_WLAN_INT[@]}${WIRELESS_INTERFACES[$i]}\n"); done
		LIST_WLAN_INT[-1]=${LIST_WLAN_INT[-1]::-2}
		CHANGE_WLAN_INT=$(echo -e "${LIST_WLAN_INT[@]}" | rofi_cmd "${LIST_WLAN_INT[@]}" $WIDTH_FIX_STATUS)
		for i in "${!WIRELESS_INTERFACES[@]}"; do [[ $CHANGE_WLAN_INT == "${WIRELESS_INTERFACES[$i]}" ]] && WLAN_INT=$i && break; done
	}
	wireless_interface_state && ethernet_interface_state
	rofi_menu
}

function scan() {
	[[ "$WIFI_CON_STATE" =~ "unavailable" ]] && change_wifi_state "Wi-Fi" "Enabling Wi-Fi connection" "on" && sleep 2
	WIFI_LIST=$(nmcli --fields SSID,SECURITY,BARS device wifi list ifname "${WIRELESS_INTERFACES[WLAN_INT]}" --rescan yes)
	wifi_list
	wireless_interface_state && ethernet_interface_state
	rofi_menu
}

function wifi_list() {
	WIFI_LIST=$(echo -e "$WIFI_LIST" | awk -F'  +' '{ if (!seen[$1]++) print}' | awk '$1!="--" {print}')
	[[ $ASCII_OUT == "true" ]] && WIFI_LIST=$(echo -e "$WIFI_LIST" | sed 's/\(..*\)\*\{4,4\}/\1▂▄▆█/g' | sed 's/\(..*\)\*\{3,3\}/\1▂▄▆_/g' | sed 's/\(..*\)\*\{2,2\}/\1▂▄__/g' | sed 's/\(..*\)\*\{1,1\}/\1▂___/g')
	[[ $CHANGE_BARS == "true" ]] && WIFI_LIST=$(echo -e "$WIFI_LIST" | sed 's/\(.*\)▂▄▆█/\1'$SIGNAL_STRENGTH_4'/' | sed 's/\(.*\)▂▄▆_/\1'$SIGNAL_STRENGTH_3'/' | sed 's/\(.*\)▂▄__/\1'$SIGNAL_STRENGTH_2'/' | sed 's/\(.*\)▂___/\1'$SIGNAL_STRENGTH_1'/' | sed 's/\(.*\)____/\1'$SIGNAL_STRENGTH_0'/')
	WIFI_LIST=$(echo -e "$WIFI_LIST" | awk -v active="$ACTIVE_SSID" '{if ($1 == active) {print "✓ " $0} else {print $0}}')
}

function change_wifi_state() {
	nmcli radio wifi "$3"
}

function send_notification() {
    local title="$1"
    local message="$2"
    awesome-client "
local naughty = require('naughty')
naughty.notify({title = '$title', text = '$message'})
"
}

function change_wired_state() {
    local action="$3"
    local interface="$4"
    if [ "$action" = "connect" ]; then
        send_notification "Connecting" "Attempting to connect to wired network"
        if nmcli device "$action" "$interface"; then
            send_notification "Connected" "Successfully connected to wired network"
        else
            send_notification "Connection Failed" "Unable to connect to wired network"
        fi
    else
        nmcli device "$action" "$interface"
    fi
}

function net_restart() {
	nmcli networking off && sleep 3 && nmcli networking on
}

function disconnect() {
    ACTIVE_SSID=$(nmcli -t -f GENERAL.CONNECTION dev show "${WIRELESS_INTERFACES[WLAN_INT]}" | cut -d ':' -f2)
    send_notification "Disconnecting" "Disconnecting from $ACTIVE_SSID"
    if nmcli con down id "$ACTIVE_SSID"; then
        send_notification "Disconnected" "Successfully disconnected from $ACTIVE_SSID"
    else
        send_notification "Disconnection Failed" "Unable to disconnect from $ACTIVE_SSID"
    fi
}

function check_wifi_connected() {
	[[ "$(nmcli device status | grep "^${WIRELESS_INTERFACES[WLAN_INT]}." | awk '{print $3}')" == "connected" ]] && disconnect "Connection_Terminated"
}

function connect() {
    check_wifi_connected
    local ssid="$1"
    local password="$2"
    send_notification "Connecting" "Attempting to connect to $ssid"
    if nmcli dev wifi con "$ssid" password "$password" ifname "${WIRELESS_INTERFACES[WLAN_INT]}"; then
        send_notification "Connected" "Successfully connected to $ssid"
    else
        send_notification "Connection Failed" "Unable to connect to $ssid"
    fi
}

function enter_passwword() {
	PROMPT="Enter_Password" && PASS=$(echo "if connection is stored,hit enter/esc." | rofi_cmd "if connection is stored,hit enter/esc." 4 "-password")
}

function enter_ssid() {
	PROMPT="Enter_SSID" && SSID=$(rofi_cmd "" 40)
}

function stored_connection() {
    check_wifi_connected
    local ssid="$1"
    send_notification "Connecting" "Attempting to connect to $ssid"
    if nmcli dev wifi con "$ssid" ifname "${WIRELESS_INTERFACES[WLAN_INT]}"; then
        send_notification "Connected" "Successfully connected to $ssid"
    else
        send_notification "Connection Failed" "Unable to connect to $ssid"
    fi
}

function ssid_manual() {
	enter_ssid
	[[ -n $SSID ]] && {
		enter_passwword
		{ [[ -n "$PASS" ]] && [[ "$PASS" != "if connection is stored,hit enter/esc." ]] && connect "$SSID" "$PASS"; } || stored_connection "$SSID"
	}
}

function ssid_hidden() {
	enter_ssid
	[[ -n $SSID ]] && {
		enter_passwword && check_wifi_connected
		[[ -n "$PASS" ]] && [[ "$PASS" != "if connection is stored,hit enter/esc." ]] && {
			nmcli con add type wifi con-name "$SSID" ssid "$SSID" ifname "${WIRELESS_INTERFACES[WLAN_INT]}"
			nmcli con modify "$SSID" wifi-sec.key-mgmt wpa-psk
			nmcli con modify "$SSID" wifi-sec.psk "$PASS"
		} || [[ $(nmcli -g NAME con show | grep -c "$SSID") -eq "0" ]] && nmcli con add type wifi con-name "$SSID" ssid "$SSID" ifname "${WIRELESS_INTERFACES[WLAN_INT]}"
		nmcli con up id "$SSID"
	}
}

function interface_status() {
	local -n INTERFACES=$1
	for i in "${!INTERFACES[@]}"; do
		CON_STATE=$(nmcli device status | grep "^${INTERFACES[$i]}." | awk '{print $3}')
		INT_NAME=${INTERFACES[$i]}
		[[ "$CON_STATE" == "connected" ]] && STATUS="$INT_NAME:\n\t$(nmcli -t -f GENERAL.CONNECTION dev show "${INTERFACES[$i]}" | awk -F '[:]' '{print $2}') ~ $(nmcli -t -f IP4.ADDRESS dev show "${INTERFACES[$i]}" | awk -F '[:/]' '{print $2}')" || STATUS="$INT_NAME: ${CON_STATE^}"
		echo -e "${STATUS}"
	done
}

function status() {
	OPTIONS=""
	[[ ${#WIRED_INTERFACES[@]} -ne "0" ]] && ETH_STATUS="$(interface_status WIRED_INTERFACES)             " && OPTIONS="${OPTIONS}${ETH_STATUS}"
	[[ ${#WIRELESS_INTERFACES[@]} -ne "0" ]] && WLAN_STATUS="$(interface_status WIRELESS_INTERFACES)" && { [[ -n ${OPTIONS} ]] && OPTIONS="${OPTIONS}\n${WLAN_STATUS}" || OPTIONS="${OPTIONS}${WLAN_STATUS}"; }
	echo -e "$OPTIONS" | rofi_cmd "$OPTIONS" $WIDTH_FIX_STATUS "" "mainbox{children:[listview];}"
}

function manual_hidden() {
	OPTIONS="${SELECTION_PREFIX}Manual\n${SELECTION_PREFIX}Hidden" && SELECTION=$(echo -e "$OPTIONS" | rofi_cmd "$OPTIONS" $WIDTH_FIX_STATUS "" "mainbox{children:[listview];}")
	selection_action
}

function more_options() {
	OPTIONS="${SELECTION_PREFIX}Manual/Hidden\n${SELECTION_PREFIX}Status\n${SELECTION_PREFIX}Restart Network"
	[[ -x "$(command -v nm-connection-editor)" ]] && OPTIONS="${OPTIONS}\n${SELECTION_PREFIX}Open Connection Editor"
	SELECTION=$(echo -e "$OPTIONS" | rofi_cmd "$OPTIONS" "$WIDTH_FIX_STATUS" "" "mainbox {children:[listview];}")
	selection_action
}

function toggle_wifi() {
	if [[ "$WIFI_CON_STATE" == "unavailable" ]]; then
		change_wifi_state "Wi-Fi" "Enabling Wi-Fi connection" "on"
	else
		change_wifi_state "Wi-Fi" "Disabling Wi-Fi connection" "off"
	fi
	wireless_interface_state && ethernet_interface_state
	rofi_menu
}

function selection_action() {
	case "$SELECTION" in
	"${SELECTION_PREFIX}Disconnect"*) disconnect "Connection_Terminated" ;;
	"${SELECTION_PREFIX}Scan") scan ;;
	"${SELECTION_PREFIX}Status") status ;;
	"${SELECTION_PREFIX}Manual/Hidden") manual_hidden ;;
	"${SELECTION_PREFIX}Manual") ssid_manual ;;
	"${SELECTION_PREFIX}Hidden") ssid_hidden ;;
	"${SELECTION_PREFIX}Wi-Fi Toggle") toggle_wifi ;;
	"${SELECTION_PREFIX}Wired Off") change_wired_state "Ethernet" "Disabling Wired connection" "disconnect" "${WIRED_INTERFACES}";;
	"${SELECTION_PREFIX}Wired On") change_wired_state "Ethernet" "Enabling Wired connection" "connect" "${WIRED_INTERFACES}";;
	"*Wi-Fi Disabled*") main;;
	"*Wired Unavailable*") main;;
	"*Wired Initializing*") main;;
	"${SELECTION_PREFIX}Change Wifi Interface") change_wireless_interface ;;
	"${SELECTION_PREFIX}Restart Network") net_restart "Network" "Restarting Network" ;;
	"${SELECTION_PREFIX}More Options") more_options ;;
	"${SELECTION_PREFIX}Open Connection Editor") nm-connection-editor ;;
	*)
		[[ -n "$SELECTION" ]] && [[ "$WIFI_LIST" =~ .*"$SELECTION".* ]] && {
			[[ "$SSID" == "*" ]] && SSID=$(echo "$SELECTION" | sed "s/\s\{2,\}/\|/g " | awk -F "|" '{print $3}')
			{ [[ "$ACTIVE_SSID" == "$SSID" ]] && nmcli con up "$SSID" ifname "${WIRELESS_INTERFACES[WLAN_INT]}"; } || {
				[[ "$SELECTION" =~ "WPA2" ]] || [[ "$SELECTION" =~ "WEP" ]] && enter_passwword
				{ [[ -n "$PASS" ]] && [[ "$PASS" != "if connection is stored,hit enter/esc." ]] && connect "$SSID" "$PASS"; } || stored_connection "$SSID"
			}
		}
		;;
	esac
}

function main() {
	initialization && rofi_menu
}

main