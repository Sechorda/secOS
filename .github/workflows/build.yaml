name: Build and Upload secOS
on:
  workflow_dispatch:
env:
  DEBIAN_FRONTEND: noninteractive
jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-utils \
            debootstrap \
            squashfs-tools \
            xorriso \
            isolinux \
            syslinux-efi \
            grub-pc-bin \
            grub-efi-amd64-bin \
            grub-efi-ia32-bin \
            mtools \
            dosfstools \
            wget \
            unzip \
            virtualbox \
            curl \
            gpg

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone

      - name: Configure rclone
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${R2_ACCESS_KEY_ID}
          secret_access_key = ${R2_SECRET_ACCESS_KEY}
          endpoint = https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com
          acl = private
          bucket_name = ${R2_BUCKET_NAME}
          EOF

      - name: Run debootstrap and verify installation
        run: |
          echo "Starting debootstrap process..."
          
          # Create LIVE_BOOT directory
          sudo mkdir -p /home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot
          
          # Run debootstrap with essential packages
          sudo debootstrap --arch=amd64 --variant=minbase \
            --include=systemd,systemd-sysv,sudo,passwd,bash-completion,linux-image-amd64 \
            stable /home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot http://ftp.us.debian.org/debian/
          
          # Verify debootstrap completion
          if [ ! -f "/home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot/bin/bash" ]; then
            echo "Error: /bin/bash not found in chroot. Debootstrap failed."
            exit 1
          fi
          
          if [ ! -f "/home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot/usr/bin/useradd" ]; then
            echo "Error: useradd not found in chroot. Essential packages not installed."
            exit 1
          fi
          
          # Verify kernel installation
          if [ ! -f "/home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot/boot/vmlinuz-*" ]; then
            echo "Error: Linux kernel not found in chroot."
            echo "Contents of /boot:"
            ls -la /home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot/boot/
            exit 1
          fi
          
          # Print chroot environment information
          echo "Chroot environment details:"
          ls -la /home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot/bin/
          ls -la /home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/chroot/boot/
          
          echo "Debootstrap completed successfully!"

      - name: Run build script
        env:
          TERM: xterm-256color
        run: |
          cd buildeb
          sudo chmod +x ./buildeb.sh
          sudo sed -i 's/clear/printf "\\033[2J\\033[H"/' ./buildeb.sh
          
          # Create necessary directories for GRUB
          sudo mkdir -p /home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/staging/boot/grub/x86_64-efi
          
          # Verify directories exist before running build script
          if [ ! -d "/home/runner/work/secOS/secOS/buildeb/LIVE_BOOT/staging/boot/grub/x86_64-efi" ]; then
            echo "Error: GRUB directories not created successfully."
            exit 1
          fi
          
          # Run the build script with full output
          sudo ./buildeb.sh

      - name: Upload files to R2
        run: |
          cd buildeb
          # Verify ISO and OVA files exist before uploading
          if [ ! -f "secOS.iso" ]; then
            echo "Error: secOS.iso not found!"
            exit 1
          fi
          if [ ! -f "secOS.ova" ]; then
            echo "Error: secOS.ova not found!"
            exit 1
          fi
          rclone copy secOS.iso r2:${R2_BUCKET_NAME}
          rclone copy secOS.ova r2:${R2_BUCKET_NAME}

      - name: Cleanup
        if: always()
        run: |
          cd buildeb
          rm -f secOS.iso secOS.ova
