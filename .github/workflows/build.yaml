name: Build SecOS ISO

on:
  push:
    tags:
      - '*.*.*'
      - '*.*.*-*'  
  workflow_dispatch:  # Keep the manual trigger as well

jobs:
  build-secOS:
    runs-on: ubuntu-latest
    env:
      TERM: xterm-256color
      DEBIAN_FRONTEND: noninteractive
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        access-token: x-access-token:${{ secrets.ACTION_PAT }}

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-utils debootstrap squashfs-tools xorriso \
          isolinux syslinux-efi grub-pc-bin grub-efi-amd64-bin grub-efi-ia32-bin \
          mtools dosfstools wget unzip git curl qemu-system-x86 qemu-utils ovmf
        curl https://rclone.org/install.sh | sudo bash

    - name: Build secOS
      run: |
        sudo mount -t proc proc /proc || echo "/proc already mounted"
        chmod +x buildeb/buildeb.sh
        cd buildeb
        sudo ./buildeb.sh

    - name: Debug Package Installation (if build fails)
      if: failure()
      run: |
        echo "=== BUILD FAILED - Identifying unavailable packages ==="
        
        # Check which packages from our list are NOT available
        echo "=== UNAVAILABLE PACKAGES ==="
        PACKAGES=(
            openssh-server firefox-esr kitty spotify-client vim nmap hashcat hydra 
            netcat-openbsd lightdm awesome compton rofi proxychains kismet calamares
            sudo git golang-go python3 python3-pip pipx python3-setuptools unzip 
            pciutils wget tar dpkg locales tzdata curl gpg network-manager net-tools 
            network-manager-gnome wpasupplicant wireless-tools dnsutils aircrack-ng 
            iputils-ping iproute2 firmware-linux-nonfree firmware-iwlwifi xorg 
            xserver-xorg xserver-xorg-core xserver-xorg-input-all xserver-xorg-video-all 
            alsa-utils playerctl gobject-introspection liblightdm-gobject-1-0 
            liblightdm-gobject-dev libgirepository1.0-dev libcairo2 libcairo2-dev
            libxcb1-dev libx11-dev libnss3-tools libxft-dev libxrandr-dev libxpm-dev 
            uthash-dev os-prober kpackagetool5 libkf5configcore5 libkf5coreaddons5 
            libkf5package5 libkf5parts5 libkpmcore12 libparted2 libpwquality1 
            libqt5dbus5 libqt5gui5 libqt5network5 libqt5qml5 libqt5quick5 libqt5svg5 
            libqt5widgets5 libqt5xml5 libstdc++6 qml-module-qtquick2 
            qml-module-qtquick-controls qml-module-qtquick-controls2 
            qml-module-qtquick-layouts qml-module-qtquick-window2 python3-yaml 
            udisks2 dosfstools e2fsprogs btrfs-progs xfsprogs squashfs-tools 
            grub-efi-amd64 tcpdump hostapd hcxdumptool bluez nemo
        )
        
        FAILED_PACKAGES=()
        for pkg in "${PACKAGES[@]}"; do
            if ! sudo chroot buildeb/LIVE_BOOT/chroot /bin/bash -c "apt-cache show $pkg" >/dev/null 2>&1; then
                FAILED_PACKAGES+=("$pkg")
                echo "âœ— $pkg"
            fi
        done
        
        echo "=== SUMMARY ==="
        echo "Total packages checked: ${#PACKAGES[@]}"
        echo "Failed packages: ${#FAILED_PACKAGES[@]}"
        
        if [ ${#FAILED_PACKAGES[@]} -gt 0 ]; then
            echo "=== FAILED PACKAGES LIST ==="
            printf '%s\n' "${FAILED_PACKAGES[@]}"
        fi
        
        # Show available compositor alternatives
        echo "=== AVAILABLE COMPOSITORS ==="
        sudo chroot buildeb/LIVE_BOOT/chroot /bin/bash -c "apt-cache search compositor | head -10"
        sudo chroot buildeb/LIVE_BOOT/chroot /bin/bash -c "apt-cache search picom | head -5"

    - name: Upload to Cloudflare R2
      env:
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        VERSION: ${{ github.ref_name }}
      run: |
        mkdir -p ~/.config/rclone
        cat > ~/.config/rclone/rclone.conf << EOF
        [r2]
        type = s3
        provider = Cloudflare
        access_key_id = ${R2_ACCESS_KEY_ID}
        secret_access_key = ${R2_SECRET_ACCESS_KEY}
        endpoint = ${R2_ENDPOINT}
        acl = private
        EOF
        rclone copy buildeb/secOS.iso r2:${R2_BUCKET_NAME}/
        rclone copy buildeb/secOS.vmdk r2:${R2_BUCKET_NAME}/

    - name: Update version in App.jsx
      if: startsWith(github.ref, 'refs/tags/')
      env:
        ACTION_PAT: ${{ secrets.ACTION_PAT }}
        VERSION: ${{ github.ref_name }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git clone --branch gh-pages-src https://github.com/Sechorda/secOS.git secOS-version-update
        cd secOS-version-update
        echo "=== Current App.jsx content ==="
        cat src/App.jsx | grep -i "latest release" || echo "No 'Latest Release' found"
        echo "=== Attempting version update ==="
        sed -i "s/Latest Release: [0-9]*\.[0-9]*\.[0-9]*.*beta/Latest Release: ${VERSION}/g" src/App.jsx
        echo "=== After sed replacement ==="
        cat src/App.jsx | grep -i "latest release" || echo "No 'Latest Release' found after sed"
        echo "=== Git status ==="
        git status
        if git diff --quiet; then
          echo "No changes made to App.jsx - version might already be current or pattern didn't match"
          exit 0
        else
          git add src/App.jsx
          git commit -m "Update version to v${VERSION}"
          git push https://x-access-token:${{ secrets.ACTION_PAT }}@github.com/Sechorda/secOS gh-pages-src
        fi
