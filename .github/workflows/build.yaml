name: Build and Upload secOS
on:
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  DOCKER_BUILDKIT: 1

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm
      options: --privileged --init

    steps:
      - name: System setup
        run: |
          # Clear existing sources
          rm -f /etc/apt/sources.list.d/*.sources
          
          # Setup proper sources
          cat > /etc/apt/sources.list << EOF
          deb http://deb.debian.org/debian bookworm main contrib non-free-firmware
          deb http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware
          deb http://deb.debian.org/debian bookworm-updates main contrib non-free-firmware
          EOF
          
          # Setup proper system environment
          apt-get update
          apt-get install -y \
            systemd \
            procps \
            init \
            dbus \
            udev \
            kmod

          # Initialize system services
          dbus-uuidgen > /etc/machine-id
          mkdir -p /run/lock
          export container=docker

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build requirements
        run: |

          # Update and install required packages
          apt-get update
          apt-get install -y \
            build-essential \
            debootstrap \
            squashfs-tools \
            xorriso \
            isolinux \
            syslinux-efi \
            grub-pc-bin \
            grub-efi-amd64-bin \
            grub-efi-ia32-bin \
            mtools \
            dosfstools \
            ca-certificates \
            curl \
            wget \
            unzip \
            gpg \
            apt-utils \
            linux-headers-amd64 \
            acl \
            locales

          # Configure locales properly
          echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
          locale-gen
          echo "LANG=en_US.UTF-8" > /etc/default/locale
          . /etc/default/locale

      - name: Prepare build environment
        run: |
          cd buildeb
          # Create base directories with proper permissions
          mkdir -p {LIVE_BOOT/{chroot,staging/{EFI/BOOT,boot/grub/x86_64-efi,isolinux,live}},tmp}
          chmod -R 755 LIVE_BOOT
          
          # Remove sudo commands from build script
          sed -i \
            -e 's/sudo //g' \
            -e 's/sudo -E //g' \
            -e 's/sudo -H //g' \
            -e 's/sudo -u //g' \
            -e 's/sudo chroot/chroot/g' \
            -e 's/clear/printf "\\033[2J\\033[H"/' \
            buildeb.sh
          
          chmod +x buildeb.sh

      - name: Run build script
        env:
          TERM: xterm-256color
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          HOME: /root
        run: |
          cd buildeb
          ./buildeb.sh

      - name: Upload artifacts
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # Install and configure rclone
          curl https://rclone.org/install.sh | bash
          mkdir -p ~/.config/rclone
          
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${R2_ACCESS_KEY_ID}
          secret_access_key = ${R2_SECRET_ACCESS_KEY}
          endpoint = https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com
          acl = private
          bucket_name = ${R2_BUCKET_NAME}
          EOF
          
          cd buildeb
          rclone copy secOS.iso r2:${R2_BUCKET_NAME} || true
          rclone copy secOS.ova r2:${R2_BUCKET_NAME} || true
